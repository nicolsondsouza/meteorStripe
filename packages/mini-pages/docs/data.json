{
    "project": {
        "name": "mini-pages",
        "description": "A simple client-side router for Meteor",
        "version": "0.3.0",
        "url": "https://github.com/cmather/meteor-mini-pages.git",
        "logo": false
    },
    "files": {
        "lib/mini-pages.js": {
            "name": "lib/mini-pages.js",
            "modules": {},
            "classes": {
                "PageRouter": 1,
                "PageRouter.Page": 1,
                "PageRouter.PageInvocation": 1,
                "MeteorExtensions": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "PageRouter": {
            "name": "PageRouter",
            "shortname": "PageRouter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/mini-pages.js",
            "line": 90,
            "description": "The main mini-pages class. Manages creating pages, rendering and \nresponding to url path changes. You can only create one PageRouter instance.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "PageRouter options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "autoRender",
                            "description": "Set `false` to render manually \n (i.e. when you use the {{renderPages}} Handlebars helper",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "autoStart",
                            "description": "Set to `false` to manually decide \n when to listen for url change events.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "defaults",
                            "description": "Default options that will be applied to\n all {{#crossLink \"PageRouter.Page\"}}{{/crossLink}} instances.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "PageRouter.Page": {
            "name": "PageRouter.Page",
            "shortname": "PageRouter.Page",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/mini-pages.js",
            "line": 487,
            "description": "Controller and container class for a page route. The constructor function\nregisters the page with the underlying pushState handler. For now, we are\nusing page-js to do this. You shouldn't create Page instances directly.\nInstead, let the PageRouter manage this for you.",
            "example": [
                "\n    new PageRouter.Page(router, \"/posts/:_id\", {\n        to: \"templateName\",\n        as: \"pathHelper\",\n        layout: \"layoutTemplateName\",\n        nav: \"navKey\",\n        before: [firstFilter, secondFilter]\n    });"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "router",
                    "description": "A PageRouter instance.",
                    "type": "PageRouter"
                },
                {
                    "name": "path",
                    "description": "The path associated with the page.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Can either be an object\nof options, the name of a template, or a function that will act as the\nlast before filter.",
                    "type": "Object | String | Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "to",
                            "description": "The name of a template to render.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "as",
                            "description": "The name used in path helpers. All names\n  will get a path helper like this: <name>Path. These path helpers are\n  available as methods like Meteor.postShowPath() and as Handlebars helpers.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "layout",
                            "description": "The name of a template to use for a layout.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "nav",
                            "description": "A key to use for nav. Most useful in applying\n  conditional classes to navigation bars.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "before",
                            "description": "A function or array of functions\n  to be called before the layout and template are rendered.",
                            "type": "Function | Array",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "PageRouter.PageInvocation": {
            "name": "PageRouter.PageInvocation",
            "shortname": "PageRouter.PageInvocation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/mini-pages.js",
            "line": 728,
            "description": "Created each time the url path changes and a page is run. The PageInvocation\nallows before filters to dynamically set the template, layout and nav, and\nprovides methods for redirecting, stopping execution of the before filters and\ngetting and setting page variables that will be cleaned up when a new page\nis run.\n\nInstances are created automatically by the PageRouter when a path change\ncauses the router's run method to be called. The PageInvocation instance\nis the value of `this` in all before filters.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "router",
                    "description": "A page router instance.",
                    "type": "PageRouter"
                },
                {
                    "name": "page",
                    "description": "A page instance.",
                    "type": "PageRouter.Page"
                },
                {
                    "name": "context",
                    "description": "An optional context object.",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "MeteorExtensions": {
            "name": "MeteorExtensions",
            "shortname": "MeteorExtensions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Meteor"
            ],
            "file": "lib/mini-pages.js",
            "line": 946,
            "description": "The main Meteor API methods."
        }
    },
    "classitems": [
        {
            "file": "lib/mini-pages.js",
            "line": 132,
            "description": "Create a bunch of pages at once.",
            "example": [
                "\n    var router = new Meteor.PageRouter({});\n    router.pages({\n     \"/posts/:_id\": {\n        to: \"templateName\",\n        layout: \"layoutName\",\n        nav: \"nav key\",\n        before: [ before callbacks ],\n        as: \"path helpers name\"\n     }\n    });"
            ],
            "itemtype": "method",
            "name": "pages",
            "chainable": 1,
            "params": [
                {
                    "name": "pages",
                    "description": "An object of page definitions where the key is a\n url path and the values are options to the \n {{#crossLink \"PageRouter.Page\"}}{{/crossLink}} constructor.",
                    "type": "Object"
                }
            ],
            "class": "PageRouter"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 161,
            "description": "Create a new {{#crossLink \"PageRouter.Page\"}}{{/crossLink}}\nand return it.",
            "example": [
                "\n    // with options\n    var router = new Meteor.PageRouter({});\n    router.match(\"/posts/:_id\", { to: \"templateName\" };\n\n    // no options\n    var router = new Meteor.PageRouter({});\n    router.match(\"/posts/:_id\").to(\"templateName\");"
            ],
            "itemtype": "method",
            "name": "match",
            "params": [
                {
                    "name": "path",
                    "description": "The path to match.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options to pass to the \n  {{#crossLink \"PageRouter.Page\"}}{{/crossLink}} constructor.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "\n  A {{#crossLink \"PageRouter.Page\"}}{{/crossLink}} instance.",
                "type": "PageRouter.Page"
            },
            "class": "PageRouter"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 185,
            "description": "Navigate to a given path.",
            "itemtype": "method",
            "name": "go",
            "chainable": 1,
            "example": [
                "\n    var router = new Meteor.PageRouter({});\n    router.go(\"/posts/1234\", { someState: \"\" });"
            ],
            "params": [
                {
                    "name": "path",
                    "description": "The path to navigate to.",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "A state object to pass along.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "PageRouter"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 202,
            "description": "Automatically start the router by adding a callback to Meteor.startup.\nThe router is auto started by default.",
            "itemtype": "method",
            "name": "autoStart",
            "chainable": 1,
            "class": "PageRouter"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 217,
            "description": "Start listening for pushState events from the browser and responding\nto url changes. Call this to manually start listening. If you call\nautoStart() this will automatically be called from within a Meteor.startup\ncallback. You usually shouldn't need to call this method.",
            "itemtype": "method",
            "name": "start",
            "chainable": 1,
            "class": "PageRouter"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 234,
            "description": "Returns true of the start() method has been called",
            "itemtype": "method",
            "name": "isStarted",
            "return": {
                "description": "True if the start() method has been called",
                "type": "Boolean"
            },
            "class": "PageRouter"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 244,
            "description": "Automatically render the router to the document.body. By default the\nrouter will use autoRender(). If you instead want to render the router's\npages in a particular part of the DOM you can call render() instead and\nattach the document fragment manually. For example, the Handlebars helper\n{{renderPages}} does this.",
            "itemtype": "method",
            "name": "autoRender",
            "class": "PageRouter"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 264,
            "description": "Creates two isolated regions. One for the layout and one for the template.\nUses Spark's native reactivity to re-render the layout or template if \nthe router's current layout or template changes.",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "If called from within Meteor.render\nit returns a DocumentFragment, otherwise a string of html.",
                "type": "DocumentFragment | String"
            },
            "class": "PageRouter"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 305,
            "description": "Returns true of the render() method has been called at least once. Does\nnot mean that anything has been attached to the dom.",
            "itemtype": "method",
            "name": "isRendered",
            "return": {
                "description": "True of the render() method has been called.",
                "type": "Boolean"
            },
            "class": "PageRouter"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 316,
            "description": "If the path is different from the current path, creates a new\n{{#crossLink \"PageRouter.PageInvocation\"}}{{/crossLink}} and runs\nthe page with the new invocation.",
            "itemtype": "method",
            "name": "run",
            "chainable": 1,
            "params": [
                {
                    "name": "path",
                    "description": "The url path.",
                    "type": "String"
                },
                {
                    "name": "page",
                    "description": "A page instance.",
                    "type": "PageRouter.Page"
                },
                {
                    "name": "context",
                    "description": "An optional context object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "PageRouter"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 336,
            "description": "Creates a new {{#crossLink \"PageRouter.PageInvocation\"}}{{/crossLink}}\nand runs the page. Then set's the router's layout, template, nav and\ninvocation object (the object you get when you call {{page.someprop}} in\nyour html.",
            "itemtype": "method",
            "name": "_runWithInvocation",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "page",
                    "description": "The page instance.",
                    "type": "PageRouter.Page"
                },
                {
                    "name": "context",
                    "description": "An optional context object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "PageRouter"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 377,
            "description": "Get or set the current invocation object. This is the object that is\navailable in your template html by using the page handlebars helper like\nthis: {{page.someProperty}}. The object gets its values from a before\nfilter calling `this.set(\"key\", \"value\")`. The value is stored in Session\nso that it's reactive and survives hot code pushes.",
            "itemtype": "method",
            "name": "invocation",
            "params": [
                {
                    "name": "value",
                    "description": "If an object is passed it will be set, otherwise\n  the current value will be returned.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the current invocation object if no parameter is\n  passed.",
                "type": "Object"
            },
            "class": "PageRouter"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 397,
            "description": "Reactively get or set the current layout.",
            "itemtype": "method",
            "name": "layout",
            "params": [
                {
                    "name": "value",
                    "description": "The name of the layout template.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "If no value passed, return the current layout template\n  name.",
                "type": "String"
            },
            "class": "PageRouter"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 412,
            "description": "Reactively test the current layout name for equality with the passed\nvalue.",
            "itemtype": "method",
            "name": "layoutEquals",
            "params": [
                {
                    "name": "value",
                    "description": "The name of the layout template to test quality.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns true if the template names are equal.",
                "type": "Boolean"
            },
            "class": "PageRouter"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 424,
            "description": "Reactively get or set the current template.",
            "itemtype": "method",
            "name": "template",
            "params": [
                {
                    "name": "value",
                    "description": "The name of the template.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "If no value passed returns the name of the current template.",
                "type": "String"
            },
            "class": "PageRouter"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 438,
            "description": "Reactively test the current template name for equality with the passed\nvalue.",
            "itemtype": "method",
            "name": "templateEquals",
            "params": [
                {
                    "name": "value",
                    "description": "The name of the template to test quality.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns true if the template names are equal.",
                "type": "Boolean"
            },
            "class": "PageRouter"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 450,
            "description": "Reactively get or set the current nav key.",
            "itemtype": "method",
            "name": "nav",
            "params": [
                {
                    "name": "value",
                    "description": "The value of the nav key.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "If no value passed returns the current nav key.",
                "type": "String"
            },
            "class": "PageRouter"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 464,
            "description": "Reactively test the current nav key for equality with the passed\nvalue.",
            "itemtype": "method",
            "name": "navEquals",
            "params": [
                {
                    "name": "value",
                    "description": "The nav key to test for equality.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns true if the nav keys are equal.",
                "type": "Boolean"
            },
            "class": "PageRouter"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 476,
            "description": "Returns the router's current url path.",
            "itemtype": "method",
            "name": "path",
            "return": {
                "description": "The current url path.",
                "type": "String"
            },
            "class": "PageRouter"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 552,
            "description": "Registers the page with the underlying pushState handler. We're using\npage-js.",
            "itemtype": "method",
            "name": "_register",
            "access": "private",
            "tagname": "",
            "class": "PageRouter.Page"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 571,
            "description": "Set a default template name for the page.",
            "itemtype": "method",
            "name": "to",
            "chainable": 1,
            "params": [
                {
                    "name": "template",
                    "description": "The name of a template.",
                    "type": "String"
                }
            ],
            "class": "PageRouter.Page"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 584,
            "description": "Set the name of the page. Primarily used in path helpers.",
            "itemtype": "method",
            "name": "as",
            "chainable": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the page, and of the path helper prefix.",
                    "type": "String"
                }
            ],
            "example": [
                "\n    page.as(\"postShow\");\n    // results in a path helper attached to Meteor and available\n    // in Handlebars.\n    // {{postShowPath}}\n    // Meteor.postShowPath({});\n"
            ],
            "class": "PageRouter.Page"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 607,
            "description": "Set the default nav key for this page.",
            "itemtype": "method",
            "name": "nav",
            "chainable": 1,
            "params": [
                {
                    "name": "nav",
                    "description": "The name of the default nav key to use for this page.",
                    "type": "String"
                }
            ],
            "example": [
                "\n    page.nav(\"posts\"); // sets the nav key primarily used for nav bars."
            ],
            "class": "PageRouter.Page"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 622,
            "description": "Set the default layout for this page.",
            "itemtype": "method",
            "name": "layout",
            "chainable": 1,
            "params": [
                {
                    "name": "layout",
                    "description": "The name of the template to use as a layout.",
                    "type": "String"
                }
            ],
            "example": [
                "\n    page.layout(\"layoutTemplateName\");"
            ],
            "class": "PageRouter.Page"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 638,
            "description": "A function or array of functions to call before rendering the page. The\nbefore callbacks will be called with `this` set to a\n{{#crossLink PageRouter.PageInvocation}}{{/crossLink}} instance.",
            "itemtype": "method",
            "name": "before",
            "chainable": 1,
            "params": [
                {
                    "name": "callbacks",
                    "description": "A function or array of callbacks.",
                    "type": "Function | Array"
                }
            ],
            "class": "PageRouter.Page"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 653,
            "description": "Given a context object, returns a url path with the values of the context\nobject mapped over the path. This method is attached to a Handlebars\nhelper and to Meteor to call from JavaScript directly. For example, given\na page named \"postShow\" you will get a Handlebars helper {{postShowPath}}\nand Meteor.postShowPath({});",
            "itemtype": "method",
            "name": "pathWithContext",
            "params": [
                {
                    "name": "context",
                    "description": "An optional context object to use for\ninterpolation.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n    // given a page with a path of \"/posts/:_id/edit\"\n    var path = page.pathWithContext({ _id: 123 });\n    // > /posts/123/edit"
            ],
            "class": "PageRouter.Page"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 698,
            "description": "Run the page with a PageRouter.PageInvocation. Runs the page's before\ncallbacks and set's the invocation's default layout, template and nav.\nReturns the resulting mutated invocation.",
            "class": "PageRouter.Page"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 764,
            "description": "The context object from the page-js event.",
            "itemtype": "attribute",
            "name": "context",
            "type": "{Object}",
            "class": "PageRouter.PageInvocation"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 772,
            "description": "The params from the url path.",
            "itemtype": "attribute",
            "name": "params",
            "type": "{Object}",
            "class": "PageRouter.PageInvocation"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 780,
            "description": "The invocation's PageRouter.Page instance.",
            "itemtype": "attribute",
            "name": "page",
            "type": "{PageRouter.Page}",
            "class": "PageRouter.PageInvocation"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 788,
            "description": "Gets or sets the invocation's layout template name.",
            "itemtype": "method",
            "name": "layout",
            "params": [
                {
                    "name": "value",
                    "description": "An optional layout template name.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "If no value provided, returns the invocation's layout\ntemplate name.",
                "type": "String"
            },
            "class": "PageRouter.PageInvocation"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 803,
            "description": "Gets or sets the invocation's template name.",
            "itemtype": "method",
            "name": "template",
            "params": [
                {
                    "name": "value",
                    "description": "An optional template name.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "If no value provided, returns the invocation's\ntemplate name.",
                "type": "String"
            },
            "class": "PageRouter.PageInvocation"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 818,
            "description": "Gets or sets the invocation's nav key.",
            "itemtype": "method",
            "name": "template",
            "params": [
                {
                    "name": "value",
                    "description": "An optional nav key.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "If no value provided, returns the invocation's\nnav key.",
                "type": "String"
            },
            "class": "PageRouter.PageInvocation"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 833,
            "description": "Stops the current page and redirects to a new path.",
            "itemtype": "method",
            "name": "redirect",
            "params": [
                {
                    "name": "path",
                    "description": "The path to redirect to.",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "An optional state object to pass along.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n    // before filter\n    function filter () {\n      this.redirect(Meteor.postIndexPath());\n    }"
            ],
            "class": "PageRouter.PageInvocation"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 850,
            "description": "Stops the current page run. Also stops pushState from being called. Call\nthis to completely stop. No rendering, no more filters.",
            "itemtype": "method",
            "name": "stop",
            "class": "PageRouter.PageInvocation"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 862,
            "description": "Returns true if the invocation has been stopped.",
            "itemtype": "method",
            "name": "isStopped",
            "return": {
                "description": "True if the stop() method has been called.",
                "type": "Boolean"
            },
            "class": "PageRouter.PageInvocation"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 872,
            "description": "Don't run any additional before filters.",
            "itemtype": "method",
            "name": "done",
            "example": [
                "\n    // inside a before filter\n    function filter () {\n      if (Meteor.loggingIn()) {\n        this.template(\"loggingIn\");\n        this.done();\n      }\n    }"
            ],
            "class": "PageRouter.PageInvocation"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 889,
            "description": "Returns true if the invocation has been marked as done.",
            "itemtype": "method",
            "name": "isDone",
            "return": {
                "description": "True if the done() method has been called.",
                "type": "Boolean"
            },
            "class": "PageRouter.PageInvocation"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 899,
            "description": "Set a page variable that can be accessed for the current invocation from\nhandlebars or downstream before filters. These will be cleared when a new\npage is run (i.e. the url path changes). These values are accessible\nusing the `page` Handlebars helper.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "The key. Example: \"post\".",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Any value.",
                    "type": "Any"
                }
            ],
            "example": [
                "\n    // inside before filter\n    function filter () {\n      this.set(\"post\", { _id: 1234 });\n    }"
            ],
            "class": "PageRouter.PageInvocation"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 918,
            "description": "Gets a current invocation value.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "The key.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value associated with the key.",
                "type": "Any"
            },
            "example": [
                "\n    // inside before filter\n    function filter () {\n      var post = this.get(\"post\");\n    }"
            ],
            "class": "PageRouter.PageInvocation"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 934,
            "description": "Returns the invocation's dictionary. This is what is put into Session\nbefore the page is rendered.",
            "itemtype": "method",
            "name": "toObject",
            "return": {
                "description": "The invocation's dictionary.",
                "type": "Object"
            },
            "class": "PageRouter.PageInvocation"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 953,
            "description": "Convenience method to create a new PageRouter instance and call the\npages method on it to create a bunch of pages at once.",
            "example": [
                "\n    Meteor.pages({\n     \"/posts\": \"postIndex\",\n\n     \"/posts/:_id\": {\n        to: \"templateName\",\n        layout: \"layoutName\",\n        nav: \"nav key\",\n        before: [ before callbacks ],\n        as: \"path helpers name\"\n     },\n\n     logout: function () {\n     }\n    }, {\n      // optional options to pass to PageRouter constructor.\n      autoRender: false\n    });"
            ],
            "itemtype": "method",
            "name": "Meteor.pages",
            "params": [
                {
                    "name": "pages",
                    "description": "An object of paths to page options.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Optional options to pass to the PageRouter\nconstructor",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A new PageRouter instance.",
                "type": "PageRouter"
            },
            "class": "MeteorExtensions"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 987,
            "description": "The {{#crossLink \"PageRouter\"}}{{/crossLink}} class.",
            "itemtype": "attribute",
            "name": "Meteor.PageRouter",
            "class": "MeteorExtensions"
        },
        {
            "file": "lib/mini-pages.js",
            "line": 994,
            "description": "Navigate to the given path with an optional state object to pass along.\nThis method proxies to the underlying pushState handler. We're currently\nusing page-js.",
            "example": [
                "\n    Meteor.go(Meteor.postShowPath({_id: 1234}), { flash: \"\" });"
            ],
            "itemtype": "method",
            "name": "Meteor.go",
            "params": [
                {
                    "name": "path",
                    "description": "The path to navigate to. Example: \"/posts/1234\".",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "An optional state object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "MeteorExtensions"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/mini-pages.js:424"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/mini-pages.js:450"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/mini-pages.js:788"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/mini-pages.js:803"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/mini-pages.js:818"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/mini-pages.js:862"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/mini-pages.js:889"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/mini-pages.js:918"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/mini-pages.js:934"
        },
        {
            "message": "Missing item type\nRun the page with a PageRouter.PageInvocation. Runs the page's before\ncallbacks and set's the invocation's default layout, template and nav.\nReturns the resulting mutated invocation.",
            "line": " lib/mini-pages.js:698"
        }
    ]
}